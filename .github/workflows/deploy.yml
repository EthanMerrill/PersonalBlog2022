name: Deploy Secrets Service to AWS Lightsail Containers

on:
  push:
    branches: [main]
    paths: ["backend/**"]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if no backend changes"
        required: false
        default: "false"

env:
  AWS_REGION: us-east-1
  SERVICE_NAME: secrets-service

jobs:
  test:
    name: Test Go Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache-dependency-path: backend/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build application
        run: go build -o bin/secrets-service .

  deploy:
    name: Deploy to AWS Lightsail Containers
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Lightsail Containers
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
          AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          GITHUB_REPO: https://github.com/${{ github.repository }}.git
          POWER: nano
          SCALE: 1
        run: |
          chmod +x deploy-container.sh
          ./deploy-container.sh

      - name: Get deployment outputs
        id: outputs
        run: |
          SERVICE_URL=$(aws lightsail get-container-services \
            --service-name ${{ env.SERVICE_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'containerServices[0].url' \
            --output text)

          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be ready at ${{ steps.outputs.outputs.service_url }}/health"
          for i in {1..30}; do
            if curl -f -s "${{ steps.outputs.outputs.service_url }}/health" >/dev/null 2>&1; then
              echo "✅ Application is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Application failed to respond after 5 minutes"
              exit 1
            fi
            echo "⏳ Attempt $i/30 - waiting 10 seconds..."
            sleep 10
          done

      - name: Run health check
        run: |
          HEALTH_RESPONSE=$(curl -s "${{ steps.outputs.outputs.service_url }}/health")
          echo "Health check response: $HEALTH_RESPONSE"

          # Verify the response contains expected health check data
          if echo "$HEALTH_RESPONSE" | grep -q "status"; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed - unexpected response"
            exit 1
          fi

      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Deployment Successful!

          ## 📋 Deployment Details
          - **Service Name**: \`${{ env.SERVICE_NAME }}\`
          - **Region**: \`${{ env.AWS_REGION }}\`
          - **Service URL**: \`${{ steps.outputs.outputs.service_url }}\`
          - **Commit**: \`${{ github.sha }}\`
          - **Branch**: \`${{ github.ref_name }}\`

          ## 🔗 Application URLs
          - **Application**: [${{ steps.outputs.outputs.service_url }}](${{ steps.outputs.outputs.service_url }})
          - **Health Check**: [${{ steps.outputs.outputs.service_url }}/health](${{ steps.outputs.outputs.service_url }}/health)

          ## 🛠 Management Commands
          \`\`\`bash
          # View service status
          aws lightsail get-container-services --service-name ${{ env.SERVICE_NAME }} --region ${{ env.AWS_REGION }}

          # View container logs
          aws lightsail get-container-log --service-name ${{ env.SERVICE_NAME }} --container-name secrets-service --region ${{ env.AWS_REGION }}

          # Scale service (increase replicas)
          aws lightsail update-container-service --service-name ${{ env.SERVICE_NAME }} --scale 2 --region ${{ env.AWS_REGION }}

          # Upgrade service power
          aws lightsail update-container-service --service-name ${{ env.SERVICE_NAME }} --power micro --region ${{ env.AWS_REGION }}
          \`\`\`
          EOF

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"
          # Add Slack/Discord/Email notification here if needed

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification here if needed
          exit 1
