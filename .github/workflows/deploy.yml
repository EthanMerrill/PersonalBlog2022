name: Deploy Secrets Service to AWS

on:
  push:
    branches: [main]
    paths: ["backend/**"]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if no backend changes"
        required: false
        default: "false"

env:
  AWS_REGION: us-east-1
  STACK_NAME: secrets-service-production

jobs:
  test:
    name: Test Go Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache-dependency-path: backend/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build application
        run: go build -o bin/secrets-service .

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    # if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check stack and instance status
        id: check-stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            STACK_STATUS=$(aws cloudformation describe-stacks \
              --stack-name ${{ env.STACK_NAME }} \
              --region ${{ env.AWS_REGION }} \
              --query 'Stacks[0].StackStatus' \
              --output text)
            
            echo "stack_exists=true" >> $GITHUB_OUTPUT
            echo "stack_status=$STACK_STATUS" >> $GITHUB_OUTPUT
            echo "Stack ${{ env.STACK_NAME }} exists with status: $STACK_STATUS"
            
            # Check if stack is in a failed state that prevents updates
            if [[ "$STACK_STATUS" == *"FAILED"* ]] || [[ "$STACK_STATUS" == *"ROLLBACK"* ]]; then
              echo "needs_recreation=true" >> $GITHUB_OUTPUT
              echo "Stack is in failed state and needs to be recreated"
            elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" ]] || [[ "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
              # Stack is healthy, now check EC2 instance state
              echo "Checking EC2 instance state..."
              INSTANCE_ID=$(aws cloudformation describe-stack-resources \
                --stack-name ${{ env.STACK_NAME }} \
                --region ${{ env.AWS_REGION }} \
                --logical-resource-id "EC2Instance" \
                --query 'StackResources[0].PhysicalResourceId' \
                --output text 2>/dev/null || echo "")
              
              if [ -n "$INSTANCE_ID" ] && [ "$INSTANCE_ID" != "None" ]; then
                INSTANCE_STATE=$(aws ec2 describe-instances \
                  --instance-ids "$INSTANCE_ID" \
                  --region ${{ env.AWS_REGION }} \
                  --query 'Reservations[0].Instances[0].State.Name' \
                  --output text 2>/dev/null || echo "not-found")
                
                echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
                echo "instance_state=$INSTANCE_STATE" >> $GITHUB_OUTPUT
                echo "EC2 Instance ID: $INSTANCE_ID"
                echo "EC2 Instance State: $INSTANCE_STATE"
                
                # Check if instance is terminated or terminating
                if [[ "$INSTANCE_STATE" == "terminated" ]] || [[ "$INSTANCE_STATE" == "terminating" ]] || [[ "$INSTANCE_STATE" == "not-found" ]]; then
                  echo "needs_recreation=true" >> $GITHUB_OUTPUT
                  echo "EC2 instance is terminated/terminating or not found - stack needs recreation"
                else
                  echo "needs_recreation=false" >> $GITHUB_OUTPUT
                  echo "EC2 instance is in acceptable state: $INSTANCE_STATE"
                fi
              else
                echo "needs_recreation=true" >> $GITHUB_OUTPUT
                echo "Could not find EC2 instance in stack - stack needs recreation"
              fi
            else
              echo "needs_recreation=false" >> $GITHUB_OUTPUT
              echo "Stack is in transitional state, will attempt update"
            fi
          else
            echo "stack_exists=false" >> $GITHUB_OUTPUT
            echo "needs_recreation=false" >> $GITHUB_OUTPUT
            echo "Stack ${{ env.STACK_NAME }} does not exist"
          fi

      - name: Delete failed stack or recreate for terminated instance
        if: steps.check-stack.outputs.needs_recreation == 'true'
        run: |
          if [[ "${{ steps.check-stack.outputs.stack_exists }}" == "true" ]]; then
            echo "Deleting stack ${{ env.STACK_NAME }}..."
            if [[ -n "${{ steps.check-stack.outputs.instance_state }}" ]]; then
              echo "Reason: EC2 instance is in state '${{ steps.check-stack.outputs.instance_state }}'"
            else
              echo "Reason: Stack is in failed state '${{ steps.check-stack.outputs.stack_status }}'"
            fi
            
            aws cloudformation delete-stack \
              --stack-name ${{ env.STACK_NAME }} \
              --region ${{ env.AWS_REGION }}

            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete \
              --stack-name ${{ env.STACK_NAME }} \
              --region ${{ env.AWS_REGION }}

            echo "Stack deletion completed"
          else
            echo "Stack does not exist, proceeding with creation"
          fi

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation-template-docker.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
              KeyPairName="${{ secrets.AWS_KEY_PAIR_NAME }}" \
              JWTSecret="${{ secrets.JWT_SECRET }}" \
              AuthUsername="${{ secrets.AUTH_USERNAME }}" \
              AuthPassword="${{ secrets.AUTH_PASSWORD }}" \
              AllowedOrigins="${{ secrets.ALLOWED_ORIGINS }}" \
              OpenAIAPIKey="${{ secrets.OPENAI_API_KEY }}" \
              FirebaseAPIKey="${{ secrets.FIREBASE_API_KEY }}" \
              GitHubRepo="https://github.com/${{ github.repository }}.git" \
              DomainName="${{ secrets.DOMAIN_NAME }}" \
              SSLEmail="${{ secrets.SSL_EMAIL }}" \
              InstanceType="t2.micro" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset

      - name: Get deployment outputs
        id: outputs
        run: |
          PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIP`].OutputValue' \
            --output text)

          APPLICATION_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationURL`].OutputValue' \
            --output text)

          SSH_COMMAND=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SSHCommand`].OutputValue' \
            --output text)

          CLOUDFLARE_SETUP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudflareSetupInfo`].OutputValue' \
            --output text)

          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "application_url=$APPLICATION_URL" >> $GITHUB_OUTPUT
          echo "ssh_command=$SSH_COMMAND" >> $GITHUB_OUTPUT
          echo "cloudflare_setup=$CLOUDFLARE_SETUP" >> $GITHUB_OUTPUT

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be ready at ${{ steps.outputs.outputs.application_url }}/health"
          for i in {1..30}; do
            if curl -f -s "${{ steps.outputs.outputs.application_url }}/health" >/dev/null 2>&1; then
              echo "✅ Application is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Application failed to respond after 5 minutes"
              exit 1
            fi
            echo "⏳ Attempt $i/30 - waiting 10 seconds..."
            sleep 10
          done

      - name: Run health check
        run: |
          HEALTH_RESPONSE=$(curl -s "${{ steps.outputs.outputs.application_url }}/health")
          echo "Health check response: $HEALTH_RESPONSE"

          # Verify the response contains expected health check data
          if echo "$HEALTH_RESPONSE" | grep -q "status"; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed - unexpected response"
            exit 1
          fi

      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Deployment Successful!

          ## 📋 Deployment Details
          - **Stack Name**: \`${{ env.STACK_NAME }}\`
          - **Region**: \`${{ env.AWS_REGION }}\`
          - **Public IP**: \`${{ steps.outputs.outputs.public_ip }}\`
          - **Commit**: \`${{ github.sha }}\`
          - **Branch**: \`${{ github.ref_name }}\`

          ## 🔗 Application URLs
          - **Application**: [${{ steps.outputs.outputs.application_url }}](${{ steps.outputs.outputs.application_url }})
          - **Health Check**: [${{ steps.outputs.outputs.application_url }}/health](${{ steps.outputs.outputs.application_url }}/health)

          ## 🔧 CloudFormation Outputs
          - **SSH Command**: \`${{ steps.outputs.outputs.ssh_command }}\`
          - **Cloudflare Setup**: \`${{ steps.outputs.outputs.cloudflare_setup }}\`

          ## 🛠 Management Commands
          \`\`\`bash
          # SSH into the instance
          ${{ steps.outputs.outputs.ssh_command }}

          # Check application status
          sudo /opt/secrets-service/status.sh

          # View logs
          sudo /opt/secrets-service/logs.sh

          # Restart application
          sudo /opt/secrets-service/restart.sh
          \`\`\`
          EOF

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"
          # Add Slack/Discord/Email notification here if needed

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification here if needed
          exit 1
