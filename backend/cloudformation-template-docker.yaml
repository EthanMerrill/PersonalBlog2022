AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Secrets Service using Docker on EC2"

Parameters:
  KeyPairName:
    Type: String
    Description: Name of the EC2 Key Pair for SSH access

  JWTSecret:
    Type: String
    Description: JWT Secret for authentication
    NoEcho: true

  AuthUsername:
    Type: String
    Description: Basic auth username

  AuthPassword:
    Type: String
    Description: Basic auth password
    NoEcho: true

  AllowedOrigins:
    Type: String
    Description: Allowed CORS origins
    Default: "*"

  Domain:
    Type: String
    Description: Domain name for the application (e.g., api.yourdomain.com)
    Default: ""

  CloudflareAPIToken:
    Type: String
    Description: Cloudflare API Token for SSL certificate management
    NoEcho: true
    Default: ""

  OpenAIAPIKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true
    Default: ""

  FirebaseAPIKey:
    Type: String
    Description: Firebase API Key
    NoEcho: true
    Default: ""

  GitHubRepo:
    Type: String
    Description: GitHub repository URL

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

Resources:
  # Security Group
  SecretsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Secrets Service with Nginx Reverse Proxy
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP (Nginx reverse proxy)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS (Nginx reverse proxy)
      Tags:
        - Key: Name
          Value: secrets-service-sg

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SecretsServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  SecretsServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI (update as needed)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref SecretsServiceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          # Install Docker
          yum install -y docker git
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install

          # Create application directory
          mkdir -p /opt/secrets-service
          cd /opt/secrets-service

          # Clone repository
          git clone ${GitHubRepo} .
          cd backend

          # Create SSL directory for certificates
          mkdir -p ssl logs/nginx

          # Create environment file
          cat > .env << EOF
          VAULT_ADDR=http://localhost:8200
          VAULT_TOKEN=dev-token
          JWT_SECRET=${JWTSecret}
          PORT=8080
          ALLOWED_ORIGIN=${AllowedOrigins}
          AUTH_USERNAME=${AuthUsername}
          AUTH_PASSWORD=${AuthPassword}
          OPENAI_API_KEY=${OpenAIAPIKey}
          FIREBASE_API_KEY=${FirebaseAPIKey}
          DOMAIN=${Domain}
          CLOUDFLARE_API_TOKEN=${CloudflareAPIToken}
          EOF

          # Make deployment scripts executable
          chmod +x /opt/secrets-service/backend/deploy-nginx.sh
          chmod +x /opt/secrets-service/backend/ssl-setup.sh

          # Create management scripts (legacy compatibility)
          cat > /opt/secrets-service/start.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh start
          EOF

          cat > /opt/secrets-service/stop.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh stop
          EOF

          cat > /opt/secrets-service/restart.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh restart
          EOF

          cat > /opt/secrets-service/status.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh status
          EOF

          cat > /opt/secrets-service/logs.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh logs
          EOF

          cat > /opt/secrets-service/update.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh update
          EOF

          cat > /opt/secrets-service/health.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh health
          EOF

          # Make scripts executable
          chmod +x /opt/secrets-service/*.sh

          # Deploy the application with nginx reverse proxy
          cd /opt/secrets-service/backend
          ./deploy-nginx.sh deploy

          # Wait a moment for services to start
          sleep 30

          # Display deployment status
          ./deploy-nginx.sh status

          # Create systemd service for auto-restart with nginx support
          cat > /etc/systemd/system/secrets-service.service << 'EOF'
          [Unit]
          Description=Secrets Service with Nginx Reverse Proxy
          Requires=docker.service
          After=docker.service network.target

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/opt/secrets-service/backend/deploy-nginx.sh start
          ExecStop=/opt/secrets-service/backend/deploy-nginx.sh stop
          ExecReload=/opt/secrets-service/backend/deploy-nginx.sh restart
          WorkingDirectory=/opt/secrets-service/backend
          User=root
          Group=root

          [Install]
          WantedBy=multi-user.target
          EOF

          systemctl daemon-reload
          systemctl enable secrets-service
          systemctl start secrets-service

      Tags:
        - Key: Name
          Value: secrets-service-instance

Outputs:
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt SecretsServiceInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  ApplicationURL:
    Description: URL of the application (HTTP)
    Value: !Sub "http://${SecretsServiceInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationURL"

  ApplicationHTTPSURL:
    Description: URL of the application (HTTPS)
    Value: !Sub "https://${SecretsServiceInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationHTTPSURL"

  DomainURL:
    Description: Domain URL (if domain is configured)
    Value: !Sub "https://${Domain}"
    Export:
      Name: !Sub "${AWS::StackName}-DomainURL"
    Condition: DomainProvided

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyPairName}.pem ec2-user@${SecretsServiceInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-SSHCommand"

Conditions:
  DomainProvided: !Not [!Equals [!Ref Domain, ""]]
