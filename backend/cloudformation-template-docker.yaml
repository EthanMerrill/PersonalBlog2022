AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Secrets Service using Docker on EC2"

Parameters:
  KeyPairName:
    Type: String
    Description: Name of the EC2 Key Pair for SSH access

  JWTSecret:
    Type: String
    Description: JWT Secret for authentication
    NoEcho: true

  AuthUsername:
    Type: String
    Description: Basic auth username

  AuthPassword:
    Type: String
    Description: Basic auth password
    NoEcho: true

  AllowedOrigins:
    Type: String
    Description: Allowed CORS origins
    Default: "*"

  OpenAIAPIKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true
    Default: ""

  FirebaseAPIKey:
    Type: String
    Description: Firebase API Key
    NoEcho: true
    Default: ""

  GitHubRepo:
    Type: String
    Description: GitHub repository URL

  DomainName:
    Type: String
    Description: Domain name for SSL certificate (e.g., api.yourdomain.com)
    Default: ""

  SSLEmail:
    Type: String
    Description: Email address for Let's Encrypt SSL certificate
    Default: ""

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, ""]]

Resources:
  # Security Group
  SecretsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Secrets Service
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP port (redirects to HTTPS)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS port (Cloudflare compatible)
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 172.16.0.0/12
          Description: Application port (Docker network access only)
      Tags:
        - Key: Name
          Value: secrets-service-sg

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SecretsServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  SecretsServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI (update as needed)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref SecretsServiceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          # Install Docker
          yum install -y docker git
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install

          # Install certbot for Let's Encrypt
          yum install -y python3-pip
          pip3 install certbot

          # Create application directory
          mkdir -p /opt/secrets-service
          cd /opt/secrets-service

          # Clone repository
          git clone ${GitHubRepo} .
          cd backend

          # Create certificates directory
          mkdir -p certs

          # Create environment file
          cat > .env << EOF
          JWT_SECRET=${JWTSecret}
          PORT=8080
          ALLOWED_ORIGIN=${AllowedOrigins}
          AUTH_USERNAME=${AuthUsername}
          AUTH_PASSWORD=${AuthPassword}
          OPENAI_K=${OpenAIAPIKey}
          FIREBASE_API_KEY=${FirebaseAPIKey}
          CERT_DIR=/opt/secrets-service/backend/certs
          USE_HTTPS=false
          EOF

          # Setup SSL if domain name is provided
          if [ "${DomainName}" != "" ] && [ "${SSLEmail}" != "" ]; then
            echo "Setting up SSL for domain: ${DomainName}"
            
            # Stop any running containers
            docker-compose down || true
            
            # Obtain Let's Encrypt certificate
            certbot certonly \
              --standalone \
              --preferred-challenges http \
              --email "${SSLEmail}" \
              --agree-tos \
              --no-eff-email \
              -d "${DomainName}" \
              --non-interactive
            
            # Copy certificates to application directory
            cp "/etc/letsencrypt/live/${DomainName}/fullchain.pem" "certs/server.crt"
            cp "/etc/letsencrypt/live/${DomainName}/privkey.pem" "certs/server.key"
            
            # Set proper permissions
            chown -R ec2-user:ec2-user certs
            chmod 600 certs/server.key
            chmod 644 certs/server.crt
            
            # Create certificate renewal script
            cat > /opt/secrets-service/renew-certs.sh << 'EOFRENEW'
          #!/bin/bash
          set -e
          cd /opt/secrets-service/backend
          docker-compose down
          certbot renew --standalone
          cp "/etc/letsencrypt/live/${DomainName}/fullchain.pem" "certs/server.crt"
          cp "/etc/letsencrypt/live/${DomainName}/privkey.pem" "certs/server.key"
          chown -R ec2-user:ec2-user certs
          chmod 600 certs/server.key
          chmod 644 certs/server.crt
          docker-compose up -d
          echo "Certificate renewal completed"
          EOFRENEW
            
            chmod +x /opt/secrets-service/renew-certs.sh
            
            # Add cron job for automatic renewal
            (crontab -l 2>/dev/null; echo "0 12,0 * * * /opt/secrets-service/renew-certs.sh >> /var/log/letsencrypt-renewal.log 2>&1") | crontab -
            
            echo "SSL setup completed for ${DomainName}"
          else
            echo "No domain name provided, skipping SSL setup"
            # Create self-signed certificates for development
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout certs/server.key \
              -out certs/server.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
            chown -R ec2-user:ec2-user certs
          fi

          # Create management scripts
          cat > /opt/secrets-service/start.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          docker-compose up -d
          EOF

          cat > /opt/secrets-service/stop.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          docker-compose down
          EOF

          cat > /opt/secrets-service/restart.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          docker-compose down
          git pull origin main
          docker-compose up -d --build
          EOF

          cat > /opt/secrets-service/status.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          docker-compose ps
          EOF

          cat > /opt/secrets-service/logs.sh << 'EOF'
          #!/bin/bash
          cd /opt/secrets-service/backend
          docker-compose logs -f
          EOF

          # Make scripts executable
          chmod +x /opt/secrets-service/*.sh

          # Start the application
          cd /opt/secrets-service/backend

          # Ensure proper permissions
          chown -R ec2-user:ec2-user /opt/secrets-service

          # Start Docker Compose with proper user
          su -c "docker-compose up -d" ec2-user

          # Wait for services to be ready
          sleep 30

          # Create systemd service for auto-restart
          cat > /etc/systemd/system/secrets-service.service << 'EOF'
          [Unit]
          Description=Secrets Service
          Requires=docker.service
          After=docker.service

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/opt/secrets-service/start.sh
          ExecStop=/opt/secrets-service/stop.sh

          [Install]
          WantedBy=multi-user.target
          EOF

          systemctl enable secrets-service
          systemctl start secrets-service

      Tags:
        - Key: Name
          Value: secrets-service-instance

Outputs:
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt SecretsServiceInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  ApplicationURL:
    Description: URL of the application
    Value: !If
      - HasDomainName
      - !Sub "https://${DomainName}"
      - !Sub "http://${SecretsServiceInstance.PublicIp}:8080"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationURL"

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyPairName}.pem ec2-user@${SecretsServiceInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-SSHCommand"

  CloudflareSetupInfo:
    Description: Information for setting up Cloudflare DNS
    Value: !If
      - HasDomainName
      - !Sub "Create A record: ${DomainName} → ${SecretsServiceInstance.PublicIp} (Enable Cloudflare proxy)"
      - !Sub "Create A record: yourdomain.com → ${SecretsServiceInstance.PublicIp} (Enable Cloudflare proxy)"
    Export:
      Name: !Sub "${AWS::StackName}-CloudflareSetupInfo"
